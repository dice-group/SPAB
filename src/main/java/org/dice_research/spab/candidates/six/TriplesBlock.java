package org.dice_research.spab.candidates.six;

import java.util.List;

import org.dice_research.spab.input.Input;

/**
 * TriplesBlock ::= TriplesSameSubjectPath ( '.' TriplesBlock? )?
 * 
 * Generated by {@link GroupGraphPatternSub}.
 * 
 * Contains several {@link TriplesBlock} and {@link Triple}.
 * 
 * @see https://www.w3.org/TR/sparql11-query/#rTriplesBlock
 * 
 * @author Adrian Wilke
 */
public class TriplesBlock extends Expression {

	protected final static int MAX_TRIPLE_BLOCKS = 3;
	protected boolean createTripleBlock = false;
	protected int tripleBlockCreationCount;

	/**
	 * Creates triple block containing one triple.
	 */
	public TriplesBlock() {
		sequence.add(new Triple());
		tripleBlockCreationCount = MAX_TRIPLE_BLOCKS;
		this.createTripleBlock = true;
	}

	/**
	 * Used for recursive refinement. Will not create additional triple blocks to
	 * this sequence by default.
	 */
	public TriplesBlock(Expression origin) {
		super(origin);
	}

	@Override
	protected Expression createInstance(Expression origin) {
		return new TriplesBlock(origin);
	}

	@Override
	protected void addRegex(StringBuilder stringBuilder) {
		addSequenceToRegex(stringBuilder, " \\. ");
	}

	@Override
	public List<Expression> getRefinements(Input input) {
		List<Expression> refinements = getRefinementsOfSequence(input);

		if (createTripleBlock && tripleBlockCreationCount > 1) {
			// Create new block
			Expression additionalBlock = createInstance(this);
			// Set properties for adding an adittinal triple
			TriplesBlock triplesBlock = (TriplesBlock) additionalBlock;
			triplesBlock.tripleBlockCreationCount = tripleBlockCreationCount - 1;
			triplesBlock.createTripleBlock = true;
			refinements.add(additionalBlock);
			createTripleBlock = false;
		}

		return refinements;
	}

}