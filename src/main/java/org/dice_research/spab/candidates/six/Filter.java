package org.dice_research.spab.candidates.six;

import java.util.LinkedList;
import java.util.List;

import org.dice_research.spab.input.Input;

/**
 * Filter ::= 'FILTER' Constraint
 * 
 * Generated by {@link GraphPatternNotTriples}.
 * 
 * @see https://www.w3.org/TR/sparql11-query/#rFilter
 * 
 * @author Adrian Wilke
 */
public class Filter extends Expression {

	/**
	 * Creates expression, which has to contain reserved word FILTER
	 */
	public static List<Expression> getInitialInstances() {
		List<Expression> instances = new LinkedList<Expression>();
		instances.add(new Filter());
		return instances;
	}

	enum Type {
		INITIAL, REFINED
	};

	protected Type type;

	public Filter() {
		super();
		type = Type.INITIAL;
	}

	public Filter(Expression origin) {
		super(origin);
		type = ((Filter) origin).type;
	}

	@Override
	protected Expression createInstance(Expression origin) {
		return new Filter(origin);
	}

	@Override
	protected void addRegex(StringBuilder stringBuilder) {
		addWildcard(stringBuilder);
		stringBuilder.append("FILTER ");
		if (type.equals(Type.INITIAL)) {
			addWildcard(stringBuilder);
		}
		addSequenceToRegex(stringBuilder);
	}

	@Override
	public List<Expression> getRefinements(Input input) {
		List<Expression> refinements = super.getRefinements(input);

		if (type.equals(Type.INITIAL)) {
			// Create filters containing various constraints.
			for (Expression constraint : Constraint.getInitialInstances()) {
				Filter filter = new Filter(this);
				filter.sequence.add(constraint);
				filter.type = Type.REFINED;
				refinements.add(filter);
			}
		}
		return refinements;
	}
}