package org.dice_research.spab.candidates.six;

import java.util.LinkedList;
import java.util.List;

/**
 * GraphPatternNotTriples ::= GroupOrUnionGraphPattern | OptionalGraphPattern |
 * MinusGraphPattern | GraphGraphPattern | ServiceGraphPattern | Filter | Bind |
 * InlineData
 * 
 * Generated by {@link GroupGraphPatternSub}.
 * 
 * @see https://www.w3.org/TR/sparql11-query/#rGraphPatternNotTriples
 * 
 * @author Adrian Wilke
 */
public class GraphPatternNotTriples extends Expression {

	/**
	 * Creates objects containing {@link GroupOrUnionGraphPattern} or
	 * {@link Filter}.
	 */
	public static List<Expression> getInitialInstances() {
		List<Expression> instances = new LinkedList<Expression>();

		GraphPatternNotTriples graphPatternNotTriples = new GraphPatternNotTriples();
		graphPatternNotTriples.sequence.add(new GroupOrUnionGraphPattern());
		instances.add(graphPatternNotTriples);

		for (Expression filter : Filter.getInitialInstances()) {
			graphPatternNotTriples = new GraphPatternNotTriples();
			graphPatternNotTriples.sequence.add(filter);
			instances.add(graphPatternNotTriples);
		}

		return instances;
	}

	public GraphPatternNotTriples() {
		super();
	}

	public GraphPatternNotTriples(Expression origin) {
		super(origin);
	}

	@Override
	protected Expression createInstance(Expression origin) {
		return new GraphPatternNotTriples(origin);
	}

	@Override
	protected void addRegex(StringBuilder stringBuilder) {
		boolean empty = false;
		if (stringBuilder.length() == 0) {
			empty = true;
		}

		addSequenceToRegex(stringBuilder);

		if (empty) {
			encloseWithWildcards(stringBuilder);
		}
	}
}