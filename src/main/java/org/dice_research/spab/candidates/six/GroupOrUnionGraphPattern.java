package org.dice_research.spab.candidates.six;

import java.util.List;

import org.dice_research.spab.input.Input;

/**
 * GroupOrUnionGraphPattern ::= GroupGraphPattern ( 'UNION' GroupGraphPattern )*
 * 
 * Generated by {@link GraphPatternNotTriples}.
 * 
 * @see https://www.w3.org/TR/sparql11-query/#rGroupOrUnionGraphPattern
 * 
 * @author Adrian Wilke
 */
public class GroupOrUnionGraphPattern extends Expression {

	enum Type {
		INITIAL, REFINED
	};

	protected Type type;

	// TODO Get max out of input
	protected final static int MAX = 4;
	protected int counter;

	public GroupOrUnionGraphPattern() {
		sequence.add(new GroupGraphPattern());
		sequence.add(new ExpressionString(" UNION "));
		sequence.add(new GroupGraphPattern());
		counter = MAX;
		type = Type.INITIAL;
	}

	public GroupOrUnionGraphPattern(Expression origin) {
		super(origin);
		sequence.add(new ExpressionString(" UNION "));
		sequence.add(new GroupGraphPattern());
		type = Type.INITIAL;
	}

	@Override
	protected Expression createInstance(Expression origin) {
		return new GroupOrUnionGraphPattern(origin);
	}

	@Override
	protected void addRegex(StringBuilder stringBuilder) {
		addSequenceToRegex(stringBuilder);
	}

	@Override
	public List<Expression> getRefinements(Input input) {
		List<Expression> refinements = super.getRefinements(input);

		if (type.equals(Type.INITIAL) && counter > 1) {
			GroupOrUnionGraphPattern groupOrUnionGraphPattern = new GroupOrUnionGraphPattern(this);
			groupOrUnionGraphPattern.counter = counter - 1;
			refinements.add(groupOrUnionGraphPattern);
			
			type = Type.REFINED;
		}
		
		return refinements;
	}
}